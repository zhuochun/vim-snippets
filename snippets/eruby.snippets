include html.snippets
include ruby.snippets

# Rails
# .erb and .rhmtl files

snippet %
options word
	<% ${1:TARGET} %>
snippet =
options word
	<%= ${1:TARGET} %>
snippet escape_javascript
alias j
options word
	<%=j ${1:TARGET} %>
snippet end
	<% end %>
snippet each
	<% ${1}.each do |${2}| %>
		${3:TARGET}
	<% end %>
snippet for
	<% for ${2:item} in ${1} %>
		${3:TARGET}
	<% end %>
snippet render
	<%= render '${1:item}' %>
snippet render partial
	<%= render partial: '${1:item}' %>
snippet render partial locals
	<%= render partial: '${1:item}', locals: { ${2:name}: '${3:value}'$4 } %>
snippet render partial status
	<%= render partial: '${1:item}', status: ${2:500} %>
snippet render partial collection
	<%= render partial: '${1:item}', collection: ${2:items} %>
snippet render file
	<%= render file: '${1:file}'${2} %>
snippet render template
	<%= render template: '${1:file}'${2} %>
# url helpers
snippet link_to
alias lt
	<%= link_to '${1:link}', ${2:path} %>
snippet link_to do
alias ltd
	<%= link_to ${1:path} do %>
		${2:content}
	<% end %>
snippet link_to back
alias ltb
	<%= link_to 'Back', url_for(:back) %>
snippet link_to_if
	<%= link_to_if ${1:condition}, ${2:link}, ${3:path} %>
snippet link_to_unless
	<%= link_to_unless ${1:condition}, ${2:link}, ${3:path} %>
snippet button_to
	<%= button_to '${1:button text}', ${2:action}, method: :${3:delete} %>
snippet yield
	<%= yield :${1:content_symbol} %>${2}
snippet yield optional
	<%= yield :${1:content_symbol} if content_for?(:$1) %>
snippet current_page? path
alias cp
	current_page?(${1:path})
snippet current_page? controller
	current_page?(controller: ${1:path}, action: ${2:action})
snippet content_for?
	content_for?(:${1:head})
snippet content_for? do
	<% content_for :${1:head} do %>
		${2}
	<% end %>
snippet content_tag
alias ct
	<%= content_tag :${1:div}, ${2:content}, ${3:options} %>
snippet content_tag do
alias ctd
	<%= content_tag :${1:div} do %>
		${2}
	<% end %>
snippet content_tag for
	<%= content_tag_for :${1:div}, ${2:model} do %>
		${3}
	<% end %>
snippet content_div for
alias div_for
	<%= div_for ${1:model} do %>
		${2}
	<% end %>
snippet dom_class
alias class
	<%= dom_class ${1:model}, ${2:prefix} %>
snippet dom_id
alias id
	<%= dom_id ${1:model}, ${2:prefix} %>
# text helpers
snippet cycle
	cycle(${1:first_value}, ${2:values})
snippet truncate
	truncate(${1:text}, length: ${2:30})
# sanitize helpers
snippet sanitize
	<%= sanitize ${1:html} %>
snippet strip_links
	strip_links(${1:html})
snippet strip_tags
	strip_tags(${1:html})
snippet form_for
	<%= form_for ${1:@model} do |f| %>
		${2}
	<% end %>
snippet form_for builder
	<%= form_for ${1:@model}, builder: ${2:Special}Builder do |f| %>
		${3}
	<% end %>
snippet form_for simple
	<%= simple_form_for ${1:@model} do |f| %>
		${2}
	<% end %>
snippet form_for with error
	<% error_messages_for :${1:model} %>

	<%= form_for ${2:@model} do |f| %>
		${3}
	<% end %>
snippet form fields
	<%= fields_for :${1:model}, @$1 do |${2:f}| %>
		${3}
	<% end %>
snippet form input
alias input
	<%= ${1:f}.input :${2:attribute} %>
snippet form check_box
alias check_box
	<%= ${1:f}.check_box :${2:attribute} %>
snippet form file_field
alias file_field
	<%= ${1:f}.file_field :${2:attribute} %>
snippet form hidden_field
alias hidden_field
	<%= ${1:f}.hidden_field :${2:attribute} %>
snippet form label
alias label
	<%= ${1:f}.label :${2:attribute}, '${3:$2}' %>
snippet form password
alias password
	<%= ${1:f}.password_field :${2:attribute} %>
snippet form date
alias date_field
	<%= ${1:f}.date_field :${2:attribute} %>
snippet form radio_button
alias radio_button
	<%= ${1:f}.radio_button :${2:attribute}, :${3:tag_value} %>
snippet form submit
alias submit_btn
	<%= ${1:f}.submit '${2:submit}' %>
snippet form text_area
alias text_area
	<%= ${1:f}.text_area :${2:attribute} %>
snippet form text_field
alias text_field
	<%= ${1:f}.text_field :${2:attribute} %>
snippet form collection select
alias collection_select
	<%= ${1:f}.collection_select(:${2:method}, ${3:collection}, :${4:value_method}, :${5:text_method}) %>
snippet form collection radio
alias collection_radio_buttons
	<%= ${1:f}.collection_radio_buttons(:${2:method}, ${3:collection}, :${4:value_method}, :${5:text_method}) %>
snippet form collection checkbox
alias collection_check_boxes
	<%= ${1:f}.collection_check_boxes(:${2:method}, ${3:collection}, :${4:value_method}, :${5:text_method}) %>
snippet img tag
	<%= image_tag '${1}'${2} %>
snippet img path
	image_path('${1:name}')
snippet img url
	image_url('${1:name}')
snippet ofcfs
	<%= options_from_collection_for_select ${1:collection}, ${2:value_method}, ${3:text_method}, ${4:selected_value} %>
snippet js
alias javascript
	<%= javascript_include_tag '${1}' %>
snippet js :all
	<%= javascript_include_tag ${1::all} %>
snippet css
alias style stylesheet
	<%= stylesheet_link_tag '${1}' %>
snippet css cache
	<%= stylesheet_link_tag ${1::all}, cache: ${2:true} %>
# conditions
snippet if
	<% if ${1} %>
		${2:TARGET}
	<% end %>
snippet if else
alias ife
	<% if ${1} %>
		${2:TARGET}
	<% else %>
		${3}
	<% end %>
snippet else
	<% else %>
snippet elsif
	<% elsif ${1:condition} %>
# i18
snippet i18 translate
alias t
options word
	<%=t '${1:type.key}' %>
snippet i18 localize
alias l
options word
	<%=l '${1:type.key}' %>
# cache helpers
snippet cache fragment
	<% cache ${1:key} do %>
		${2:TARGET}
	<% end %>
# function helpers
snippet pluralize
	pluralize(${1:size}, '${2:word}')
# time helpers
snippet distance_of_time_in_words
	distance_of_time_in_words(${1:from_time}, ${2:to_time})
snippet distance_of_time_in_words_to_now
	distance_of_time_in_words_to_now(${1:from_time})
snippet time_ago_in_words
	time_ago_in_words(${1:from_time})
# number helpers
snippet number to_currency
	number_to_currency ${1}
snippet number to_human
	number_to_human ${1}
snippet number to_human_size
	number_to_human_size ${1}
snippet number to_percentage
	number_to_percentage ${1}
snippet number to_phone
	number_to_phone ${1}
snippet number with_delimiter
	number_with_delimiter ${1}
snippet number with_precision
	number_with_precision ${1}
# cancan gem
snippet can default
alias can
	can? :${1:action}, ${2:Model}
snippet can manage
	can? :manage, ${1:Model}
snippet can read
	can? :read, ${1:Model}
snippet can create
	can? :create, ${1:Model}
snippet can update
	can? :update, ${1:Model}
snippet can destroy
	can? :destroy, ${1:Model}
# pundit gem
snippet policy
	policy(@${1}).${2}?
# flutie gem
snippet body class
	<%= body_class %>
snippet body extra class
	content_for(:extra_body_classes, '${1}')
