# Shebang
snippet shebang
alias #!
	#!/usr/bin/env node
# Strict
snippet use strict
alias strict
options head
	"use strict";
# Node
snippet require
alias req
	var $1 = require("./${1:module}");
# Export
snippet exports
alias exp
	module.exports = ${1}
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
snippet prototype
	${1:class}.prototype = {
		constructor: ${1}
		${2:defaults} : ${3}
	};
# Function
snippet fun
	function ${1:function_name}(${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {
		${3}
	}${2:;}
# Immediate function
snippet (f
	(function(${1}) {
		${3}
	}(${2}));
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# if
snippet if
	if (${1:true}) {
		${2}
	}
# if ... else
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
# tertiary conditional
snippet ?
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch (${1:expression}) {
		case "${3:case}":
			${4}
			break;
		${5}
		default:
			${2}
	}
# case
snippet case
	case "${1:case}":
		${2}
		break;
	${3}
# for (...) {...}
snippet for
	for (${1:i = 0}; ${2}; ${3}) {
		${4}
	}
# for (...) {...}
snippet fori
	for (var ${2:i} = 0, l = ${1:arr}.length; $2 < l; $2 ++) {
		var ${3:v} = $1[$2];${4:}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:arr}.length - 1; $2 >= 0; $2 --) {
		var ${3:v} = $1[$2];${4:}
	}
# for (property in object ) { ... }
snippet forin
	for (var ${1:prop} in ${2:Things}) {
		${3:$2[$1]}
	}
# while (...) {...}
snippet while
	while (${1:/* condition */}) {
		${2}
	}
# try
snippet try
	try {
		${1}
	} catch (${2:e}) {
		${3:/* handle error */}
	}
# do...while
snippet do
	do {
		${2}
	} while (${1:/* condition */});
# setTimeout function
snippet setTimeout
	setTimeout(function () {${3}}, ${1:10});
# Get Elements
snippet get tagname
options word
	getElementsBy${1:TagName}("${2}")${3}
# Get Element
snippet get id
options word
	getElementBy${1:Id}("${2}")${3}
# Console
snippet console.log
alias consl
	console.log(${1});
snippet console.error
alias conse
	console.error(${1});
snippet console assert
	console.assert(${1});
snippet console trace
	console.trace();${1}
snippet console dir
	console.dir(${1});
snippet console.timeStamp
	console.timeStamp(${1:annotation});
# return
snippet ret
	return ${1:result}
# apply
snippet apply
options word
	apply(${1:null}, ${2:array_of_args});
# call
snippet call
options word
	call(${1:null}, ${2:arg_1}, ${3: arg_2})
# hasOwnProperty
snippet has
options word
	hasOwnProperty(${1})
# docstring
snippet /**
alias doc
	/**
	 * ${1:description}
	 *
	 */
snippet @par
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
# JSON.parse
snippet jsonp
	JSON.parse(${1:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${1:object});
# self-defining function
snippet sdf
	var ${1:function_name} = function(${2:argument}) {
		${3}

		$1 = function ($2) {
			${4}
		};
	};
# singleton
snippet singleton
	function ${1:Singleton}(${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};

		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3}

		return instance;
	}
# Crockford"s object function
snippet obj
	function object(o) {
		function F() {}
		F.prototype = o;
		return new F();
	}
# Define multiple properties
snippet props
	var ${1:my_object} = Object.defineProperties(
		${2:new Object()},
		{
			${3:property} : {
				get : function $1_$3_getter() {
					// getter code
				},
				set : function $1_$3_setter(value) {
					// setter code
				},
				value        : ${4:value},
				writeable    : ${5:boolean},
				enumerable   : ${6:boolean},
				configurable : ${7:boolean}
			}
		}
	);
# Define single property
snippet prop
	Object.defineProperty(
		${1:object},
		"${2:property}",
		{
			get : function $1_$2_getter() {
				// getter code
			},
			set : function $1_$2_setter(value) {
				// setter code
			},
			value        : ${3:value},
			writeable    : ${4:boolean},
			enumerable   : ${5:boolean},
			configurable : ${6:boolean}
		}
	);
# helpers
snippet array slice
alias toArray
    Array.prototype.slice.call(${1:array-like-object})
# object
snippet object keys
alias keys
	Object.keys(${1:obj})${2}
snippet object type
alias type
	Object.prototype.toString.call(${1}) == "[object ${2:Object}]"
# es6
snippet find
options head
	find(function(${1:i}) {
		return ${2};
	});
snippet findIndex
alias index
options head
	findIndex(function(${1:i}) {
		return ${2};
	});
snippet map
alias collect
options head
	map(function(${1:i}) {
		return ${2};
	});
snippet filter
alias select
options head
	filter(function(${1:i}) {
		return ${2};
	});
snippet reduce
alias inject
options head
	reduce(function(${1}, ${2:val}) {
		return ${4};
	}, ${3});
snippet forEach
alias each
options head
	forEach(function(${1:elem}, ${2:idx}) {
		${3}
	});
# regular expression
snippet regex positive lookahead
alias pla
	(?=${1})
snippet regex negative lookahead
alias nla
	(?!${1})
snippet regex positive lookbehind
alias plb
	(?<=${1})
snippet regex negative lookbehind
alias nlb
	(?<!${1})
# backbones
snippet view model
	Backbone.View.extend({
		events: {
		},
		initialize: function() {
			${1}
		},
		render: function() {
			return this;
		}
	});
snippet view collection
	Backbone.View.extend({
		events: {

		},
		initialize: function() {
			${1}

			this.collection.on("add", this.addOne, this);
			this.collection.on("reset", this.addAll, this);
		},
		addOne: function(subject) {

		},
		addAll: function() {
			this.collection.forEach(this.addOne, this);
		},
		render: function() {
			this.addAll();
		}
	});
snippet model
	Backbone.Model.extend({${1}});
snippet collection
	Backbone.Collection.extend({
		model: ${1:Model}
	});
snippet router
	Backbone.Router.extend({
		routes: {
			"": "index",
			"${1:path}": "${2:handler}"
		},
		index: function() {

		},
		${2}: function() {

		},
		initialize: function(${3:options}) {
			${4}
		}
	});
snippet history
	Backbone.history.start({pushState: true});
# gulp
snippet gulp init
alias gi
	var gulp = require("gulp")${1};

	gulp.task("default", function(){
		// place code for your default task here
	});
snippet gulp task
alias gt
	gulp.task("${1:task-name}", function() {
		${2}
	});
snippet gulp src
alias gs
	gulp.src("${1:./**}")
		.pipe(${2})${3:;}
snippet gulp pipe
alias gs
	pipe(${1:plugin}(${2}))${3:;}
snippet gulp dest
alias gd
	gulp.dest("${1:./build}")${2:;}
snippet gulp watch
alias gw
	gulp.watch("${1:glob}", ["${3:task}"${4}]);
snippet gulp copy
alias gcp
	gulp.src("${1:src/**}")
		.pipe(gulp.dest("${2:./build/**}"));
snippet gulp coffee
	gulp.task("coffee", function() {
		gulp.src("./coffee/*.coffee")
			.pipe(coffee(${1}))
			.pipe(gulp.dest("./js"));
	});
snippet gulp less
	gulp.task("less", function() {
		gulp.src("./less/*.less")
			.pipe(less({compress: ${1:true}}))
			.pipe(gulp.dest("./css"));
	});
# BDD
snippet describe
alias des
	describe("${1:context to test}", function() {
		${2}
	});
snippet it
	it("${1:should do something}", function() {
		${2}
	});
snippet it async
alias ita
	it("${1:should do something async}", function(done) {
		${2:done()}
	});
snippet before
	before(function(${1:done}) {
		${2}
	});
snippet after
	after(function(${1:done}) {
		${2}
	});
snippet beforeEach
	beforeEach(function(${1:done}) {
		${2}
	});
snippet afterEach
	afterEach(function(${1:done}) {
		${2}
	});
# Chai - Assert
snippet chai require assert
	var assert = require("chai").assert${1:;}
snippet assert
	assert(${1:expression})
snippet assert equal
	assert.equal(${1:actual}, ${2:expected})
snippet assert not equal
	assert.notEqual(${1:actual}, ${2:expected})
snippet assert strict equal
	assert.strictEqual(${1:actual}, ${2:expected})
snippet assert not strict equal
	assert.notStrictEqual(${1:actual}, ${2:expected})
snippet assert deep equal
	assert.deepEqual(${1:actual}, ${2:expected})
snippet assert not deep equal
	assert.notDeepEqual(${1:actual}, ${2:expected})
snippet assert isTrue
	assert.isTrue(${1:value})
snippet assert isFalse
	assert.isFalse(${1:value})
snippet assert isNull
	assert.isNull(${1:value})
snippet assert isUndefined
	assert.isUndefined(${1:value})
snippet assert isDefined
	assert.isDefined(${1:value})
snippet assert isFunction
	assert.isFunction(${1:value})
snippet assert isObject
	assert.isObject(${1:value})
snippet assert isArray
	assert.isArray(${1:value})
snippet assert isString
	assert.isString(${1:value})
snippet assert isNumber
	assert.isNumber(${1:value})
snippet assert typeOf
	assert.typeOf(${1:value}, ${2:name})
snippet assert match
	assert.match(${1:value}, ${2:regex})
snippet assert lengthOf
	assert.lengthOf(${1:object}, ${2:length})
# Chai - Expect
snippet chai require expect
	var expect = require("chai").expect${1:;}
snippet expto
	expect(${1:expression}).to.${2:equal}(${3});
snippet expto equal
	expect(${1:expression}).to.equal(${2});
snippet expto not equal
	expect(${1:expression}).to.not.equal(${2});
snippet expto deep equal
	expect(${1:expression}).to.deep.equal(${2});
snippet expto eql
	expect(${1:expression}).to.eql(${2});
snippet expto be a
	expect(${1:expression}).to.be.a("${2:string}");
snippet expto be instanceof
	expect(${1:expression}).to.be.instanceof("${2:string}");
snippet expto be true
	expect(${1:expression}).to.be.true;
snippet expto be false
	expect(${1:expression}).to.be.false;
snippet expto be null
	expect(${1:expression}).to.be.null;
snippet expto be defined
	expect(${1:expression}).to.be.defined;
snippet expto be undefined
	expect(${1:expression}).to.be.undefined;
snippet expto be empty
	expect(${1:expression}).to.be.empty;
snippet expto be above
	expect(${1:expression}).to.be.above(${2});
snippet expto be below
	expect(${1:expression}).to.be.below(${2});
snippet expto be within
	expect(${1:expression}).to.be.within(${2});
snippet expto exist
	expect(${1:expression}).to.exist;
snippet expto include
	expect(${1:expression}).to.include(${2});
snippet expto contain
	expect(${1:expression}).to.contain(${2});
snippet expto match
	expect(${1:expression}).to.match(/${2}/);
snippet expto throw
	expect(${1:expression}).to.throw(${2});
snippet expto satisfy
	expect(${1:expression}).to.satisfy(function(${2:args}) {
		${3}
	});
# jasmine
snippet exp toBe
	expect(${1:expression}).toBe(${2:true});
snippet exp toNotBe
	expect(${1:expression}).toNotBe(${2:true});
snippet exp toEqual
	expect(${1:expression}).toEqual(${2:value});
snippet exp toNotEqual
	expect(${1:expression}).toNotEqual(${2:value});
snippet exp toMatch
	expect(${1:expression}).toMatch(${2:regex});
snippet exp toNotMatch
	expect(${1:expression}).toNotMatch(${2:regex});
snippet exp toBeDefined
	expect(${1:expression}).toBeDefined();
snippet exp toBeUndefined
	expect(${1:expression}).toBeUndefined();
snippet exp toBeNull
	expect(${1:expression}).toBeNull();
snippet exp toBeTruthy
	expect(${1:expression}).toBeTruthy();
snippet exp toBeFalsy
	expect(${1:expression}).toBeFalsy();
snippet exp toContain
	expect(${1:expression}).toContain(${2:string});
snippet exp toNotContain
	expect(${1:expression}).toNotContain(${2:string});
snippet exp toBeLessThan
	expect(${1:expression}).toBeLessThan(${2:number});
snippet exp toBeGreaterThan
	expect(${1:expression}).toBeGreaterThan(${2:number});
snippet exp toBeNaN
	expect(${1:expression}).toBeNaN();
snippet exp toBeCloseTo
	expect(${1:expression}).toBeCloseTo(${2:precision});
snippet exp toThrow
	expect(${1:expression}).toThrow();
# angular
snippet angular
alias ng
	angular.
snippet angular module
alias ngm
	angular.module("${1:moduleName}", [${2:dependency}])${0}
snippet angular module get
alias ngmm
	angular.module("${1:moduleName}")${0}
# angular scope
snippet scope
alias sc
	$scope.
snippet scope fun
alias scf
options head
	$scope.${1:functionName} = function(${2:args}) {
		${3}
	};
snippet scope var
alias scv
options head
	$scope.${1:variable} = ${2:value};
snippet scope watch
options head
	$scope.$watch("${1:watchExpr}", function(newVal, oldVal) {
		${2}
	});
snippet scope on
options head
	$scope.$on("${1:eventName}", function(event, ${2:args}) {
		${3}
	});
snippet scope broadcast
	$scope.$broadcast("${1:eventName}", ${2:eventArgs});
snippet scope emit
	$scope.$emit("${1:eventName}", ${2:eventArgs});
# angular core
snippet config angular
alias ngc
options word
	.config(function(${1:$routeProvider}) {
		${2}
	})
snippet config injectables angular
options word
	.config([
		"${1:$routeProvider}",
		function($1) {
			${2}
		}
	});
snippet controller angular
alias ngctr
options word
	.controller("${1:Some}Controller", function($scope${2}) {
		${3}
	});
snippet controller injectables angular
options word
	.controller("${1:Some}Controller", [
		"$scope",
		function($scope) {
			${2}
		}
	]);
snippet directive angular
alias ngdir
options word
	.directive("${1:directiveName}", function() {
		return {
			restrict: "${2:AE}",
			scope: {
				${4}
			},
			templateUrl: "${3:url}"
		};
	});
snippet directive injectables angular
options word
	.directive("${1:directiveName}", [
		"${2:dependency}",
		function($2) {
			return {
				restrict: "${3:AE}",
				scope: {
					${5}
				},
				templateUrl: "${4:url}"
			};
		}
	]);
snippet directive link angular
	link: function(scope, element, attrs, ${1:ctrls}) {
		${2}
	}${0:,}
snippet directive controller angular
	controllerAs: "${1}",
	controller: function($scope, $element, $attrs) {
		${2}
	}${0:,}
snippet directive scope value angular
alias s@
	${1:key}: "@${2:val}"${0:,}
snippet directive scope binding angular
alias s=
	${1:key}: "=${2:val}"${0:,}
snippet directive scope function angular
alias s&
	${1:key}: "&${2:val}"${0:,}
snippet factory angular
alias ngfa
options word
	.factory("${1:some}Factory", function() {
		return {
			${2}
		};
	});
snippet factory injectables angular
options word
	.factory("${1:some}Factory", [
		"${2:dependency}",
		function($2) {
			return {
				${3}
			};
		}
	]);
snippet service angular
alias ngse
options word
	.service("${1:some}Service", function() {
		${2}
	});
snippet service injectables angular
options word
	.service("${1:some}Service", [
		"${2:dependency}",
		function($2) {
			${3}
		}
	]);
snippet filter angular
alias ngfi
options word
	.filter("${1:filterName}", function() {
		return function(input, ${2:args}) {
			${3}
		};
	});
snippet filter injectables angular
options word
	.filter("${1:filterName}", [
		"${2:dependency}",
		function($2) {
			return function(input, ${2:args}) {
				${3}
			};
		}
	]);
# angular route
snippet route angular
alias ngr
	$routeProvider
	.when("${1:url}", {
		controller: "${2:controller}",
		templateUrl: "${3:templateUrl}"
	})${0}
snippet when route angular
alias ngrw
	.when("${1:url}", {
		controller: "${2:controller}",
		templateUrl: "${3:templateUrl}"
	})${0}
snippet when route resolve angular
alias ngrwr
	.when("${1:url}", {
		controller: "${2:controller}",
		templateUrl: "${3:templateUrl}",
		resolve: {
			${4}
		}
	})${0}
snippet otherwise route angular
alias ngro
	.otherwise({
		redirectTo: "${1:url}"
	});
